// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package internship_talendjob.mysqltocsv_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: MySQLtoCSV Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class MySQLtoCSV implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(host != null){
				
					this.setProperty("host", host.toString());
				
			}
			
			if(port != null){
				
					this.setProperty("port", port.toString());
				
			}
			
			if(db != null){
				
					this.setProperty("db", db.toString());
				
			}
			
			if(uname != null){
				
					this.setProperty("uname", uname.toString());
				
			}
			
			if(pw != null){
				
					this.setProperty("pw", pw.toString());
				
			}
			
			if(table != null){
				
					this.setProperty("table", table.toString());
				
			}
			
			if(outpath1 != null){
				
					this.setProperty("outpath1", outpath1.toString());
				
			}
			
			if(outpath2 != null){
				
					this.setProperty("outpath2", outpath2.toString());
				
			}
			
			if(startdatecoba != null){
				
					this.setProperty("startdatecoba", startdatecoba.toString());
				
			}
			
			if(enddatecoba != null){
				
					this.setProperty("enddatecoba", enddatecoba.toString());
				
			}
			
			if(startdate != null){
				
					this.setProperty("startdate", startdate.toString());
				
			}
			
			if(enddate != null){
				
					this.setProperty("enddate", enddate.toString());
				
			}
			
			if(authentication_db != null){
				
					this.setProperty("authentication_db", authentication_db.toString());
				
			}
			
			if(collection1 != null){
				
					this.setProperty("collection1", collection1.toString());
				
			}
			
			if(collection2 != null){
				
					this.setProperty("collection2", collection2.toString());
				
			}
			
			if(database != null){
				
					this.setProperty("database", database.toString());
				
			}
			
			if(password != null){
				
					this.setProperty("password", password.toString());
				
			}
			
			if(server != null){
				
					this.setProperty("server", server.toString());
				
			}
			
			if(username != null){
				
					this.setProperty("username", username.toString());
				
			}
			
		}

public String host;
public String getHost(){
	return this.host;
}
public String port;
public String getPort(){
	return this.port;
}
public String db;
public String getDb(){
	return this.db;
}
public String uname;
public String getUname(){
	return this.uname;
}
public java.lang.String pw;
public java.lang.String getPw(){
	return this.pw;
}
public String table;
public String getTable(){
	return this.table;
}
public String outpath1;
public String getOutpath1(){
	return this.outpath1;
}
public String outpath2;
public String getOutpath2(){
	return this.outpath2;
}
public String startdatecoba;
public String getStartdatecoba(){
	return this.startdatecoba;
}
public String enddatecoba;
public String getEnddatecoba(){
	return this.enddatecoba;
}
public String startdate;
public String getStartdate(){
	return this.startdate;
}
public String enddate;
public String getEnddate(){
	return this.enddate;
}
public String authentication_db;
public String getAuthentication_db(){
	return this.authentication_db;
}
public String collection1;
public String getCollection1(){
	return this.collection1;
}
public String collection2;
public String getCollection2(){
	return this.collection2;
}
public String database;
public String getDatabase(){
	return this.database;
}
public java.lang.String password;
public java.lang.String getPassword(){
	return this.password;
}
public String server;
public String getServer(){
	return this.server;
}
public String username;
public String getUsername(){
	return this.username;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "MySQLtoCSV";
	private final String projectName = "INTERNSHIP_TALENDJOB";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				MySQLtoCSV.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(MySQLtoCSV.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMysqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class report_summaryStruct implements routines.system.IPersistableRow<report_summaryStruct> {
    final static byte[] commonByteArrayLock_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[0];
    static byte[] commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[0];

	
			    public String sender_id;

				public String getSender_id () {
					return this.sender_id;
				}
				
			    public Integer total;

				public Integer getTotal () {
					return this.total;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV.length) {
				if(length < 1024 && commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV.length == 0) {
   					commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[1024];
				} else {
   					commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV, 0, length);
			strReturn = new String(commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTERNSHIP_TALENDJOB_MySQLtoCSV) {

        	try {

        		int length = 0;
		
					this.sender_id = readString(dis);
					
						this.total = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.sender_id,dos);
					
					// Integer
				
						writeInteger(this.total,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sender_id="+sender_id);
		sb.append(",total="+String.valueOf(total));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(report_summaryStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[0];
    static byte[] commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[0];

	
			    public String sender_id;

				public String getSender_id () {
					return this.sender_id;
				}
				
			    public Integer total;

				public Integer getTotal () {
					return this.total;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV.length) {
				if(length < 1024 && commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV.length == 0) {
   					commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[1024];
				} else {
   					commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV, 0, length);
			strReturn = new String(commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTERNSHIP_TALENDJOB_MySQLtoCSV) {

        	try {

        		int length = 0;
		
					this.sender_id = readString(dis);
					
						this.total = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.sender_id,dos);
					
					// Integer
				
						writeInteger(this.total,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sender_id="+sender_id);
		sb.append(",total="+String.valueOf(total));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
report_summaryStruct report_summary = new report_summaryStruct();





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("report_summary" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.outpath1)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitEvery_tFileOutputDelimited_1 = 1000;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("sender_id");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("total");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
report_summaryStruct report_summary_tmp = new report_summaryStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_1", false);
		start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_1";

	
		int tos_count_tMysqlInput_1 = 0;
		
    	class BytesLimit65535_tMysqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_1().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1.getTime();
		    int nb_line_tMysqlInput_1 = 0;
		    java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.mariadb.jdbc.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_1);
			   	String dbUser_tMysqlInput_1 = context.uname;
			   	
        		
        		
        		
	final String decryptedPassword_tMysqlInput_1 = context.pw; 
			   	
		        String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;
		        
				
				String url_tMysqlInput_1 = "jdbc:mariadb://" + context.host + ":" + context.port + "/" + context.db + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(url_tMysqlInput_1,dbUser_tMysqlInput_1,dbPwd_tMysqlInput_1);
		        
		    
			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1.createStatement();

		    String dbquery_tMysqlInput_1 = "SELECT \n  sender as sender_id, \n  count(*) as total\nFROM "+context.table+"\nWHERE cast(created_at as date) \n  between '"+context.startdate+"' and '"+context.enddate+"'\nGROUP BY sender;";
			

                       globalMap.put("tMysqlInput_1_QUERY",dbquery_tMysqlInput_1);

		    java.sql.ResultSet rs_tMysqlInput_1 = null;
		try{
		    rs_tMysqlInput_1 = stmt_tMysqlInput_1.executeQuery(dbquery_tMysqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1.getMetaData();
		    int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

		    String tmpContent_tMysqlInput_1 = null;
		    
		    
		    while (rs_tMysqlInput_1.next()) {
		        nb_line_tMysqlInput_1++;
		        
							if(colQtyInRs_tMysqlInput_1 < 1) {
								row1.sender_id = null;
							} else {
	                         		
        	row1.sender_id = routines.system.JDBCUtil.getString(rs_tMysqlInput_1, 1, false);
		                    }
							if(colQtyInRs_tMysqlInput_1 < 2) {
								row1.total = null;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(2) != null) {
                row1.total = rs_tMysqlInput_1.getInt(2);
            } else {
                    row1.total = null;
            }
		                    }
					

 



/**
 * [tMysqlInput_1 begin ] stop
 */
	
	/**
	 * [tMysqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 


	tos_count_tMysqlInput_1++;

/**
 * [tMysqlInput_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

report_summary = null;


// # Output table : 'report_summary'
report_summary_tmp.sender_id = row1.sender_id ;
report_summary_tmp.total = row1.total ;
report_summary = report_summary_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "report_summary"
if(report_summary != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//report_summary
			//report_summary


			
				if(execStat){
					runStat.updateStatOnConnection("report_summary"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(report_summary.sender_id != null) {
                        sb_tFileOutputDelimited_1.append(
                            report_summary.sender_id
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(report_summary.total != null) {
                        sb_tFileOutputDelimited_1.append(
                            report_summary.total
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */

} // End of branch "report_summary"







	
	/**
	 * [tMysqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

	}
}finally{
	if(rs_tMysqlInput_1 !=null){
		rs_tMysqlInput_1.close();
	}
	stmt_tMysqlInput_1.close();
		if(conn_tMysqlInput_1 != null && !conn_tMysqlInput_1.isClosed()) {
			
			conn_tMysqlInput_1.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_1_NB_LINE",nb_line_tMysqlInput_1);
		


 

ok_Hash.put("tMysqlInput_1", true);
end_Hash.put("tMysqlInput_1", System.currentTimeMillis());




/**
 * [tMysqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("report_summary"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class report_detail_messageoutStruct implements routines.system.IPersistableRow<report_detail_messageoutStruct> {
    final static byte[] commonByteArrayLock_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[0];
    static byte[] commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[0];

	
			    public String wa_message_id;

				public String getWa_message_id () {
					return this.wa_message_id;
				}
				
			    public String message_id;

				public String getMessage_id () {
					return this.message_id;
				}
				
			    public String recipient_type;

				public String getRecipient_type () {
					return this.recipient_type;
				}
				
			    public String msisdn;

				public String getMsisdn () {
					return this.msisdn;
				}
				
			    public String sender_id;

				public String getSender_id () {
					return this.sender_id;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV.length) {
				if(length < 1024 && commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV.length == 0) {
   					commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[1024];
				} else {
   					commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV, 0, length);
			strReturn = new String(commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTERNSHIP_TALENDJOB_MySQLtoCSV) {

        	try {

        		int length = 0;
		
					this.wa_message_id = readString(dis);
					
					this.message_id = readString(dis);
					
					this.recipient_type = readString(dis);
					
					this.msisdn = readString(dis);
					
					this.sender_id = readString(dis);
					
					this.message = readString(dis);
					
					this.created_at = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.wa_message_id,dos);
					
					// String
				
						writeString(this.message_id,dos);
					
					// String
				
						writeString(this.recipient_type,dos);
					
					// String
				
						writeString(this.msisdn,dos);
					
					// String
				
						writeString(this.sender_id,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("wa_message_id="+wa_message_id);
		sb.append(",message_id="+message_id);
		sb.append(",recipient_type="+recipient_type);
		sb.append(",msisdn="+msisdn);
		sb.append(",sender_id="+sender_id);
		sb.append(",message="+message);
		sb.append(",created_at="+String.valueOf(created_at));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(report_detail_messageoutStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[0];
    static byte[] commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[0];

	
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public String message_id;

				public String getMessage_id () {
					return this.message_id;
				}
				
			    public String msisdn;

				public String getMsisdn () {
					return this.msisdn;
				}
				
			    public String recipient_type;

				public String getRecipient_type () {
					return this.recipient_type;
				}
				
			    public String sender_id;

				public String getSender_id () {
					return this.sender_id;
				}
				
			    public String wa_message_id;

				public String getWa_message_id () {
					return this.wa_message_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV.length) {
				if(length < 1024 && commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV.length == 0) {
   					commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[1024];
				} else {
   					commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV, 0, length);
			strReturn = new String(commonByteArray_INTERNSHIP_TALENDJOB_MySQLtoCSV, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTERNSHIP_TALENDJOB_MySQLtoCSV) {

        	try {

        		int length = 0;
		
					this.created_at = readDate(dis);
					
					this.message = readString(dis);
					
					this.message_id = readString(dis);
					
					this.msisdn = readString(dis);
					
					this.recipient_type = readString(dis);
					
					this.sender_id = readString(dis);
					
					this.wa_message_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// String
				
						writeString(this.message_id,dos);
					
					// String
				
						writeString(this.msisdn,dos);
					
					// String
				
						writeString(this.recipient_type,dos);
					
					// String
				
						writeString(this.sender_id,dos);
					
					// String
				
						writeString(this.wa_message_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("created_at="+String.valueOf(created_at));
		sb.append(",message="+message);
		sb.append(",message_id="+message_id);
		sb.append(",msisdn="+msisdn);
		sb.append(",recipient_type="+recipient_type);
		sb.append(",sender_id="+sender_id);
		sb.append(",wa_message_id="+wa_message_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
report_detail_messageoutStruct report_detail_messageout = new report_detail_messageoutStruct();





	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("report_detail_messageout" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_2().limitLog4jByte();

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.outpath2)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitEvery_tFileOutputDelimited_2 = 1000;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("wa_message_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("message_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("recipient_type");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("msisdn");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("sender_id");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("message");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("created_at");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
report_detail_messageoutStruct report_detail_messageout_tmp = new report_detail_messageoutStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMysqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_2", false);
		start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_2";

	
		int tos_count_tMysqlInput_2 = 0;
		
    	class BytesLimit65535_tMysqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_2().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2.getTime();
		    int nb_line_tMysqlInput_2 = 0;
		    java.sql.Connection conn_tMysqlInput_2 = null;
				String driverClass_tMysqlInput_2 = "org.mariadb.jdbc.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_2);
			   	String dbUser_tMysqlInput_2 = context.uname;
			   	
        		
        		
        		
	final String decryptedPassword_tMysqlInput_2 = context.pw; 
			   	
		        String dbPwd_tMysqlInput_2 = decryptedPassword_tMysqlInput_2;
		        
				
				String url_tMysqlInput_2 = "jdbc:mariadb://" + context.host + ":" + context.port + "/" + context.db + "?" + "noDatetimeStringSync=true";
				
				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(url_tMysqlInput_2,dbUser_tMysqlInput_2,dbPwd_tMysqlInput_2);
		        
		    
			java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2.createStatement();

		    String dbquery_tMysqlInput_2 = "SELECT\n  created_at, \n  message, \n  message_id, \n  msisdn, \n  recipient_type, \n  sender as sender_id,\n  wa_message_id\nFROM "+context.table+"\nWHERE cast(created_at as date) \n  between '"+context.startdate+"' and '"+context.enddate+"';";
			

                       globalMap.put("tMysqlInput_2_QUERY",dbquery_tMysqlInput_2);

		    java.sql.ResultSet rs_tMysqlInput_2 = null;
		try{
		    rs_tMysqlInput_2 = stmt_tMysqlInput_2.executeQuery(dbquery_tMysqlInput_2);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2.getMetaData();
		    int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2.getColumnCount();

		    String tmpContent_tMysqlInput_2 = null;
		    
		    
		    while (rs_tMysqlInput_2.next()) {
		        nb_line_tMysqlInput_2++;
		        
							if(colQtyInRs_tMysqlInput_2 < 1) {
								row2.created_at = null;
							} else {
										
	        if(rs_tMysqlInput_2.getString(1) != null) {
	            String dateString_tMysqlInput_2 = rs_tMysqlInput_2.getString(1);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_2) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_2)) {
	                row2.created_at = rs_tMysqlInput_2.getTimestamp(1);
	            } else {
	                row2.created_at = (java.util.Date) year0_tMysqlInput_2.clone();
	            }
	        } else {
	            row2.created_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_2 < 2) {
								row2.message = null;
							} else {
	                         		
        	row2.message = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 3) {
								row2.message_id = null;
							} else {
	                         		
        	row2.message_id = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 3, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 4) {
								row2.msisdn = null;
							} else {
	                         		
        	row2.msisdn = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 4, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 5) {
								row2.recipient_type = null;
							} else {
	                         		
        	row2.recipient_type = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 5, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 6) {
								row2.sender_id = null;
							} else {
	                         		
        	row2.sender_id = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 6, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 7) {
								row2.wa_message_id = null;
							} else {
	                         		
        	row2.wa_message_id = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 7, false);
		                    }
					

 



/**
 * [tMysqlInput_2 begin ] stop
 */
	
	/**
	 * [tMysqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 


	tos_count_tMysqlInput_2++;

/**
 * [tMysqlInput_2 main ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

report_detail_messageout = null;


// # Output table : 'report_detail_messageout'
report_detail_messageout_tmp.wa_message_id = row2.wa_message_id ;
report_detail_messageout_tmp.message_id = row2.message_id ;
report_detail_messageout_tmp.recipient_type = row2.recipient_type ;
report_detail_messageout_tmp.msisdn = row2.msisdn ;
report_detail_messageout_tmp.sender_id = row2.sender_id ;
report_detail_messageout_tmp.message = row2.message ;
report_detail_messageout_tmp.created_at = row2.created_at ;
report_detail_messageout = report_detail_messageout_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "report_detail_messageout"
if(report_detail_messageout != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

			//report_detail_messageout
			//report_detail_messageout


			
				if(execStat){
					runStat.updateStatOnConnection("report_detail_messageout"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(report_detail_messageout.wa_message_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            report_detail_messageout.wa_message_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(report_detail_messageout.message_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            report_detail_messageout.message_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(report_detail_messageout.recipient_type != null) {
                        sb_tFileOutputDelimited_2.append(
                            report_detail_messageout.recipient_type
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(report_detail_messageout.msisdn != null) {
                        sb_tFileOutputDelimited_2.append(
                            report_detail_messageout.msisdn
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(report_detail_messageout.sender_id != null) {
                        sb_tFileOutputDelimited_2.append(
                            report_detail_messageout.sender_id
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(report_detail_messageout.message != null) {
                        sb_tFileOutputDelimited_2.append(
                            report_detail_messageout.message
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(report_detail_messageout.created_at != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(report_detail_messageout.created_at, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */

} // End of branch "report_detail_messageout"







	
	/**
	 * [tMysqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

	}
}finally{
	if(rs_tMysqlInput_2 !=null){
		rs_tMysqlInput_2.close();
	}
	stmt_tMysqlInput_2.close();
		if(conn_tMysqlInput_2 != null && !conn_tMysqlInput_2.isClosed()) {
			
			conn_tMysqlInput_2.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_2_NB_LINE",nb_line_tMysqlInput_2);
		


 

ok_Hash.put("tMysqlInput_2", true);
end_Hash.put("tMysqlInput_2", System.currentTimeMillis());




/**
 * [tMysqlInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("report_detail_messageout"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final MySQLtoCSV MySQLtoCSVClass = new MySQLtoCSV();

        int exitCode = MySQLtoCSVClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = MySQLtoCSV.class.getClassLoader().getResourceAsStream("internship_talendjob/mysqltocsv_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.host=(String) context.getProperty("host");
                context.port=(String) context.getProperty("port");
                context.db=(String) context.getProperty("db");
                context.uname=(String) context.getProperty("uname");
            		String pwd_pw_value = context.getProperty("pw");
            		context.pw = null;
            		if(pwd_pw_value!=null) {
            			if(context_param.containsKey("pw")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.pw = pwd_pw_value;
            			} else if (!pwd_pw_value.isEmpty()) {
            				try {
            					context.pw = routines.system.PasswordEncryptUtil.decryptPassword(pwd_pw_value);
            					context.put("pw",context.pw);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
                context.table=(String) context.getProperty("table");
                context.outpath1=(String) context.getProperty("outpath1");
                context.outpath2=(String) context.getProperty("outpath2");
                context.startdatecoba=(String) context.getProperty("startdatecoba");
                context.enddatecoba=(String) context.getProperty("enddatecoba");
                context.startdate=(String) context.getProperty("startdate");
                context.enddate=(String) context.getProperty("enddate");
                context.authentication_db=(String) context.getProperty("authentication_db");
                context.collection1=(String) context.getProperty("collection1");
                context.collection2=(String) context.getProperty("collection2");
                context.database=(String) context.getProperty("database");
            		String pwd_password_value = context.getProperty("password");
            		context.password = null;
            		if(pwd_password_value!=null) {
            			if(context_param.containsKey("password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.password = pwd_password_value;
            			} else if (!pwd_password_value.isEmpty()) {
            				try {
            					context.password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_password_value);
            					context.put("password",context.password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
                context.server=(String) context.getProperty("server");
                context.username=(String) context.getProperty("username");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("host")) {
                context.host = (String) parentContextMap.get("host");
            }if (parentContextMap.containsKey("port")) {
                context.port = (String) parentContextMap.get("port");
            }if (parentContextMap.containsKey("db")) {
                context.db = (String) parentContextMap.get("db");
            }if (parentContextMap.containsKey("uname")) {
                context.uname = (String) parentContextMap.get("uname");
            }if (parentContextMap.containsKey("pw")) {
                context.pw = (java.lang.String) parentContextMap.get("pw");
            }if (parentContextMap.containsKey("table")) {
                context.table = (String) parentContextMap.get("table");
            }if (parentContextMap.containsKey("outpath1")) {
                context.outpath1 = (String) parentContextMap.get("outpath1");
            }if (parentContextMap.containsKey("outpath2")) {
                context.outpath2 = (String) parentContextMap.get("outpath2");
            }if (parentContextMap.containsKey("startdatecoba")) {
                context.startdatecoba = (String) parentContextMap.get("startdatecoba");
            }if (parentContextMap.containsKey("enddatecoba")) {
                context.enddatecoba = (String) parentContextMap.get("enddatecoba");
            }if (parentContextMap.containsKey("startdate")) {
                context.startdate = (String) parentContextMap.get("startdate");
            }if (parentContextMap.containsKey("enddate")) {
                context.enddate = (String) parentContextMap.get("enddate");
            }if (parentContextMap.containsKey("authentication_db")) {
                context.authentication_db = (String) parentContextMap.get("authentication_db");
            }if (parentContextMap.containsKey("collection1")) {
                context.collection1 = (String) parentContextMap.get("collection1");
            }if (parentContextMap.containsKey("collection2")) {
                context.collection2 = (String) parentContextMap.get("collection2");
            }if (parentContextMap.containsKey("database")) {
                context.database = (String) parentContextMap.get("database");
            }if (parentContextMap.containsKey("password")) {
                context.password = (java.lang.String) parentContextMap.get("password");
            }if (parentContextMap.containsKey("server")) {
                context.server = (String) parentContextMap.get("server");
            }if (parentContextMap.containsKey("username")) {
                context.username = (String) parentContextMap.get("username");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("pw");
			parametersToEncrypt.add("password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tMysqlInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMysqlInput_1) {
globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", -1);

e_tMysqlInput_1.printStackTrace();

}
try {
errorCode = null;tMysqlInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMysqlInput_2) {
globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", -1);

e_tMysqlInput_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : MySQLtoCSV");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     87229 characters generated by Talend Open Studio for Big Data 
 *     on the 21 November 2022 12:55:08
 ************************************************************************************************/